{
    "docs": [
        {
            "location": "/", 
            "text": "RawLineEdit\n\n\nView and edit raw lines in Sublime Text.\n\n\n\n\nOverview\n\n\n\n\nView and edit line endings in Sublime Text.  RawLineEdit displays line endings very clearly and allows changing the line endings per line (something sublime text doesn\nt allow out of the box).\n\n\nSublime Text 3 Support?\n\n\nST3 support is found here: \nhttps://github.com/facelessuser/RawLineEdit/tree/ST3\n.  All current development is being done on ST3.\n\n\nSublime Text 2 Support?\n\n\nST2 will not be supported.", 
            "title": "About RawLineEdit"
        }, 
        {
            "location": "/#rawlineedit", 
            "text": "View and edit raw lines in Sublime Text.", 
            "title": "RawLineEdit"
        }, 
        {
            "location": "/#overview", 
            "text": "View and edit line endings in Sublime Text.  RawLineEdit displays line endings very clearly and allows changing the line endings per line (something sublime text doesn t allow out of the box).", 
            "title": "Overview"
        }, 
        {
            "location": "/#sublime-text-3-support", 
            "text": "ST3 support is found here:  https://github.com/facelessuser/RawLineEdit/tree/ST3 .  All current development is being done on ST3.", 
            "title": "Sublime Text 3 Support?"
        }, 
        {
            "location": "/#sublime-text-2-support", 
            "text": "ST2 will not be supported.", 
            "title": "Sublime Text 2 Support?"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling QuickCal.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install QuickCal is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn Sublime Text, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel.  It will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nQuickCal\n; when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install QuickCal for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/QuickCal.git QuickCal\n\n\n\n\n\n\n\n\n\n3 Restart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing QuickCal.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install QuickCal is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In Sublime Text, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel.  It will show a list of installable plugins.    Start typing  QuickCal ; when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install QuickCal for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/QuickCal.git QuickCal    3 Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguration and usage of RawLineEdit.\n\n\n\n\nGeneral Usage\n\n\nToggle the current view to a \nRawLineEdit\n view via the command palette command \nRaw Line Edit: Toggle\n (you can setup your own keybinding or add it to your context menu if you choose).\n\n\nUsing the \nEnter\n key you can change Windows style line endings to Unix or use \nShift\n + \nEnter\n to do the opposite.  Select multiple lines to change more than one line.\n\n\nSettings\n\n\nRawLineEdit has a few settings that can tweak the behavior and look of the plugin.\n\n\nuse_newline_glyph\n\n\nSublime Text 3 will show a special glyph for carriage returns, but they show nothing for normal new lines.  This setting will enable showing a \n\u00ac\n character for newlines.\n\n\n    \n// Use a glyph for a visual representation\n\n    \n// for newlines\n\n    \nuse_newline_glyph\n:\n \ntrue\n,\n\n\n\n\n\n\nuse_raw_line_edit_theme\n\n\nUses a special language file so that a theme can colorize the line endings.  See \nColorize Line Endings\n for more info.\n\n\n    \n// Use the raw line edit theme to allow\n\n    \n// a view that highlights only new lines\n\n    \n// and carriage returns for easy visualization.\n\n    \n// (Colors customizable via your color scheme file)\n\n    \nuse_raw_line_edit_theme\n:\n \ntrue\n,\n\n\n\n\n\n\nview_only\n\n\nInstead of opening a read/write view, RawLineEdit will open up a read only output panel.\n\n\n    \n// View only mode: pops up an output panel showing line endings.\n\n    \n// No editing possible.\n\n    \nview_only\n:\n \nfalse\n,\n\n\n\n\n\n\noperate_on_unsaved_buffers\n\n\nAllows RawLineEdit to operate on views that haven\nt been saved to disk.\n\n\n    \n// Operate on sublime unsaved view buffer\n\n    \n// Instead of reading the file from disk,\n\n    \n// The file will be read directly from the buffer\n\n    \n// In these cases the line endings will be normalized,\n\n    \n// but you can edit them and save them back to disk.\n\n    \n// Not sure how useful this is.\n\n    \noperate_on_unsaved_buffers\n:\n \nfalse\n\n\n\n\n\n\nuse_sub_notify\n\n\nEnables sending messages through the \nSubNotify\n plugin.\n\n\n    \n// Use subnotify if available\n\n    \nuse_sub_notify\n:\n \ntrue\n,\n\n\n\n\n\n\nColorize Line Endings\n\n\nWhen the \nuse_raw_line_edit_theme\n is enabled, RawLineEdit will use a special language file so that a theme can colorize the line endings.  In order to get the special colors, you must add special keys to your current tmTheme file.\n\n\nHere are the keys; you can specify whatever color you like:\n\n\n        \ndict\n\n            \nkey\nname\n/key\n\n            \nstring\nRaw New Line: Carriage Return\n/string\n\n            \nkey\nscope\n/key\n\n            \nstring\nglyph.carriage-return\n/string\n\n            \nkey\nsettings\n/key\n\n            \ndict\n\n                \nkey\nforeground\n/key\n\n                \nstring\n#66CCCC\n/string\n\n            \n/dict\n\n        \n/dict\n\n        \ndict\n\n            \nkey\nname\n/key\n\n            \nstring\nRaw New Line: New Line Glyph\n/string\n\n            \nkey\nscope\n/key\n\n            \nstring\nglyph.new-line\n/string\n\n            \nkey\nsettings\n/key\n\n            \ndict\n\n                \nkey\nforeground\n/key\n\n                \nstring\n#F2777A\n/string\n\n            \n/dict\n\n        \n/dict", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuration and usage of RawLineEdit.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#general-usage", 
            "text": "Toggle the current view to a  RawLineEdit  view via the command palette command  Raw Line Edit: Toggle  (you can setup your own keybinding or add it to your context menu if you choose).  Using the  Enter  key you can change Windows style line endings to Unix or use  Shift  +  Enter  to do the opposite.  Select multiple lines to change more than one line.", 
            "title": "General Usage"
        }, 
        {
            "location": "/usage/#settings", 
            "text": "RawLineEdit has a few settings that can tweak the behavior and look of the plugin.  use_newline_glyph  Sublime Text 3 will show a special glyph for carriage returns, but they show nothing for normal new lines.  This setting will enable showing a  \u00ac  character for newlines.       // Use a glyph for a visual representation \n     // for newlines \n     use_newline_glyph :   true ,   use_raw_line_edit_theme  Uses a special language file so that a theme can colorize the line endings.  See  Colorize Line Endings  for more info.       // Use the raw line edit theme to allow \n     // a view that highlights only new lines \n     // and carriage returns for easy visualization. \n     // (Colors customizable via your color scheme file) \n     use_raw_line_edit_theme :   true ,   view_only  Instead of opening a read/write view, RawLineEdit will open up a read only output panel.       // View only mode: pops up an output panel showing line endings. \n     // No editing possible. \n     view_only :   false ,   operate_on_unsaved_buffers  Allows RawLineEdit to operate on views that haven t been saved to disk.       // Operate on sublime unsaved view buffer \n     // Instead of reading the file from disk, \n     // The file will be read directly from the buffer \n     // In these cases the line endings will be normalized, \n     // but you can edit them and save them back to disk. \n     // Not sure how useful this is. \n     operate_on_unsaved_buffers :   false   use_sub_notify  Enables sending messages through the  SubNotify  plugin.       // Use subnotify if available \n     use_sub_notify :   true ,", 
            "title": "Settings"
        }, 
        {
            "location": "/usage/#colorize-line-endings", 
            "text": "When the  use_raw_line_edit_theme  is enabled, RawLineEdit will use a special language file so that a theme can colorize the line endings.  In order to get the special colors, you must add special keys to your current tmTheme file.  Here are the keys; you can specify whatever color you like:           dict \n             key name /key \n             string Raw New Line: Carriage Return /string \n             key scope /key \n             string glyph.carriage-return /string \n             key settings /key \n             dict \n                 key foreground /key \n                 string #66CCCC /string \n             /dict \n         /dict \n         dict \n             key name /key \n             string Raw New Line: New Line Glyph /string \n             key scope /key \n             string glyph.new-line /string \n             key settings /key \n             dict \n                 key foreground /key \n                 string #F2777A /string \n             /dict \n         /dict", 
            "title": "Colorize Line Endings"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current, actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8_docstrings\n, \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing  Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.  Running Validation Tests   Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current, actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8 ,  flake8_docstrings ,  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nRaw Line Edit is released under the MIT license.\n\n\nCopyright \n 2013 - 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Raw Line Edit is released under the MIT license.  Copyright   2013 - 2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}